generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Groups can have multiple members
model Group {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  members       GroupMember[]
  expenses      Expense[]
  notifications Notification[]
}

// Many-to-many relationship between users and groups
model GroupMember {
  id       Int      @id @default(autoincrement())
  groupId  Int
  userId   String   // Supabase user ID
  role     Role     @default(MEMBER)
  joinedAt DateTime @default(now())

  // User profile information (cached from Supabase)
  email    String
  name     String?

  // Relationships
  group    Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([userId])
}

// Expense categories for organization
model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  icon        String?  // Icon identifier (e.g., "food", "transport")
  color       String?  // Hex color code
  isDefault   Boolean  @default(true) // Pre-defined vs custom categories
  createdAt   DateTime @default(now())

  // Relationships
  expenses    Expense[]
}

// Individual expenses within groups
model Expense {
  id          Int      @id @default(autoincrement())
  amount      Decimal  @db.Decimal(10, 2) // Supports currency with 2 decimal places
  description String
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  groupId     Int
  paidById    String   // Supabase user ID of who paid
  categoryId  Int?     // Optional category

  // Relationships
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  category    Category? @relation(fields: [categoryId], references: [id])
  shares      ExpenseShare[]

  @@index([groupId])
  @@index([paidById])
  @@index([date])
}

// Per-member shares for an expense
model ExpenseShare {
  id        Int     @id @default(autoincrement())
  expenseId Int
  userId    String  // Supabase user ID
  amount    Decimal @db.Decimal(10, 2)

  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@unique([expenseId, userId])
  @@index([expenseId])
  @@index([userId])
}

// Notifications for users (group invitations, etc.)
model Notification {
  id        Int      @id @default(autoincrement())
  userId    String   // Supabase user ID of the recipient
  type      NotificationType
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Optional relationship data based on notification type
  groupId   Int?     // For group-related notifications
  group     Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  // Metadata as JSON for additional notification data
  metadata  Json?    // Can store additional data like inviter info, etc.
  
  @@index([userId])
  @@index([userId, isRead])
  @@index([createdAt])
}

// Types of notifications
enum NotificationType {
  GROUP_INVITATION    // User was added to a group
  EXPENSE_ADDED      // New expense was added to a group
  EXPENSE_UPDATED    // Expense was updated
  ROLE_CHANGED       // User's role in a group was changed
}

// User roles within groups
enum Role {
  OWNER   // Can delete group, manage members
  ADMIN   // Can manage members
  MEMBER  // Can add expenses, view group
}
